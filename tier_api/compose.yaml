services:
  mongo:
    image: mongo:latest
    container_name: mongo
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: mongosh --eval "try { rs.status() } catch (err) { rs.initiate() }"
      interval: 10s
      timeout: 10s
      retries: 5

  mongo-init:
    image: mongo:latest
    restart: "no"
    depends_on:
      mongo:
        condition: service_healthy
    command: >
      mongosh --host mongo:27017 --eval '
      if (rs.status().ok === 0) {
        rs.initiate({
          _id: "rs0",
          members: [{ _id: 0, host: "mongo:27017" }]
        })
      }
      '
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  rocketchat:
    image: rocketchat/rocket.chat:latest
    container_name: rocketchat
    restart: always
    depends_on:
      - mongo
    ports:
      - "3000:3000"
    environment:
      MONGO_URL: mongodb://mongo:27017/rocketchat
      ROOT_URL: http://localhost:3000
      ADMIN_USERNAME: admin
      ADMIN_PASS: 1234Pass!
      ADMIN_EMAIL: rpalacios@csumb.edu
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - backend
      - rocketchat
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network

  backend:
    build: .
    container_name: spring-boot-backend
    depends_on:
      - mongo
      - redis
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/tierlist
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    networks:
      - app-network

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost/api
    networks:
      - app-network

volumes:
  mongo-data:

networks:
  app-network: