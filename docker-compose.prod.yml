services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - BUILDPLATFORM=${BUILDPLATFORM:-linux/amd64}
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "19006:19006"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./frontend
        target: /app
        consistency: cached
    command: ["/bin/sh", "-c", "find /app -type f -name '*.sh' -exec dos2unix {} \\; && npx expo start --web --port 19006"]

  image-storage-service:
    build:
      context: ./image-storage-service
      dockerfile: Dockerfile
      args:
        - BUILDPLATFORM=${BUILDPLATFORM:-linux/amd64}
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      - SPRING_DATA_MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/image_storage_db?authSource=admin
    restart: unless-stopped
    depends_on:
      - mongodb

  auth-service:
    build:
      context: ./auth-user-service
      dockerfile: Dockerfile
      args:
        - BUILDPLATFORM=${BUILDPLATFORM:-linux/amd64}
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      - SPRING_DATA_MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/auth_db?authSource=admin
    restart: unless-stopped
    depends_on:
      - mongodb

  tier-list-service:
    build:
      context: ./tier-list-service
      dockerfile: Dockerfile
      args:
        - BUILDPLATFORM=${BUILDPLATFORM:-linux/amd64}
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/tierlist_db
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    restart: unless-stopped
    depends_on:
      - db

  chat-service:
    build:
      context: ./chat_api
      dockerfile: Dockerfile
      args:
        - BUILDPLATFORM=${BUILDPLATFORM:-linux/amd64}
        - TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
      - SPRING_DATA_CASSANDRA_KEYSPACE_NAME=chat_keyspace
      - SPRING_DATA_CASSANDRA_CONTACT_POINTS=cassandra
      - SPRING_DATA_CASSANDRA_PORT=9042
      - SPRING_DATA_CASSANDRA_DATACENTER=DC1
      - SPRING_DATA_CASSANDRA_SCHEMA_ACTION=CREATE_IF_NOT_EXISTS
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=project2redispass
    restart: unless-stopped
    depends_on:
      - cassandra
      - redis

  db:
    image: postgres:15-alpine
    platform: ${TARGETPLATFORM:-linux/amd64}
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_USER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    secrets:
      - db_password

  nginx:
    image: nginx:alpine
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - auth-service
      - tier-list-service
      - chat-service
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=auth_db
    command: ["mongod", "--bind_ip_all"]
    restart: unless-stopped

  cassandra:
    image: cassandra:latest
    platform: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=PROJ2_CLUSTER
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./chat_api/init.cql:/docker-entrypoint-initdb.d/init.cql:ro
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:latest
    platform: ${TARGETPLATFORM:-linux/amd64}
    command: redis-server --requirepass project2redispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  cassandra_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cassandra
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  node_modules:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt 