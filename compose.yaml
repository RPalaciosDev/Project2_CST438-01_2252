services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
      - "19006:19006"
    environment:
      - NODE_ENV=development
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
      - WATCHPACK_POLLING=true
    volumes:
      - type: bind
        source: ./frontend
        target: /app
        consistency: cached
      - type: volume
        source: node_modules
        target: /app/node_modules
    # Add healthcheck for better orchestration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19006"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Ensure consistent line endings in container regardless of host OS
    command: ["/bin/sh", "-c", "find /app -type f -not -path '*/node_modules/*' -not -path '*/build/*' -not -path '*/.git/*' -exec dos2unix {} \\; && npm start"]

  # Authentication service
  auth-service:
    build:
      context: ./auth-user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/auth_db?authSource=admin
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    depends_on:
      - mongodb

  # Tier list service
  tier-list-service:
    build:
      context: ./tier-list-service
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/tierlist_db
    depends_on:
      - db

  # Chat service
  chat-service:
    build:
      context: ./chat_api
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/chat_db
    depends_on:
      - db

  # Image Storage Service
  image-storage-service:
    build:
      context: ./image-storage-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/image_storage_db?authSource=admin
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    depends_on:
      - mongodb

  # Database for user data (PostgreSQL)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_USER=postgres
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    secrets:
      - db_password
    # Add healthcheck for better orchestration
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB (for Image Storage)
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_password
    ports:
      - "27017:27017"
    volumes:
      - type: volume
        source: mongodb_data
        target: /data/db
      - type: bind
        source: ./mongo-init.js
        target: /docker-entrypoint-initdb.d/mongo-init.js
        read_only: true
    secrets:
      - mongo_password
    # Add healthcheck for better orchestration
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - auth-service
      - tier-list-service
      - chat-service
      - image-storage-service

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  node_modules:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
